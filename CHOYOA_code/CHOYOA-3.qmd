---
title: "CHOYOA 3"
author: "Katie Miller"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    theme: yeti
execute:
  message: false
  warning: false
editor: visual
---

# Task 1: getting started

Set Up:

```{r}
# loading in packages
library(ggplot2)
library(tibble)
library(ggthemes)
library(scales)
library(dplyr)
```

Exercise 1:

```{r exercise-1}
# exercise 1: creating a plot using the mpg data set
mpg %>% 
  ggplot(aes(hwy, cty, color = manufacturer, size = displ)) +
  geom_point(show.legend = FALSE) +
  coord_polar() +
  theme_void() 
```

Exercise 2:

```{r exercise-2.1}
# exercise 2.1 creating polar art object 
polar_art <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
polar_art(seed = 13, n = 111, palette = c("lightblue", "purple", "darkblue"))
```

```{r exercise-2.2}
# exercise 2.2:
polar_art_new <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_point(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 5)) + 
    theme_void()
}
polar_art_new(seed = 13, n = 111, palette = c("lightblue", "purple", "darkblue"))
```

Exercise 3

```{r exercise-3.1}
# creating the random color palette generator
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]} 

show_col(sample_canva())

show_col(sample_canva())

```


```{r ex-3.2}
# exercise 3.2: creating a random color generator
sample_named_colours <- function(seed = INPUT){
  colors(distinct = TRUE)}

# using polar art to showcase the random color generator
polar_art(seed = 13, n = 199, palette = sample_named_colours(seed = 2))
```

```{r ex-3.3}
# exercise 3.3: picking 1 random color from 600
sample_canva2 <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(unlist(ggthemes::canva_palettes), 1)[[1]]}

show_col(sample_canva2())
```


Exercise 4
```{r}
# exercise 4.1: testing flexibility of functions
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}

polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size)) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none())}


# making plot exploring different values

dat1 <- sample_data(n = 1300, seed = 123) 
dat2 <- sample_data(n = 20, seed = 1) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

polar_styled_plot(palette = sample_canva(seed = 6)) + 
  geom_segment(
    data = dat1 |> mutate(size = size * 3.1)) + 
  geom_segment(
    data = dat2 |> mutate(size = size / 7.6), 
    lineend = "round", 
    colour = "black") +
  geom_point(data = dat2 |> mutate(size = size * 2),
    colour = "white")
```

```{r}
# # exercise 4.2: creating my own style of plot
my_styled_plot <- function(data = NULL, palette) {
  ggplot(data = data, mapping = aes(x = x0, y = y0, xend = x1, yend = y1, 
                                    colour = shade, size = size)) + 
    coord_flip(clip = "off") +
    scale_y_continuous( expand = c(0, 0), limits = c(0, 1), oob = scales::oob_keep) +
    scale_x_continuous(expand = c(0, 0), limits = c(0, 1), oob = scales::oob_keep) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(colour = guide_none(),size = guide_none(), fill = guide_none(), shape = guide_none())}

my_styled_plot(palette = sample_canva(seed = 901)) + 
  geom_segment(data = dat1 |> mutate(size = size * 91)) + 
  geom_curve(data = dat2 |> mutate(size = size / 0.1), 
    lineend = "round", 
    colour = "white",
    position = "jitter") +
  geom_jitter(data = dat2 |> mutate(size = size * 69),
    colour = "white")
```


# Task 2: spatial noise tricks
Set Up:
```{r set-up}
#loading in packages
library(dplyr)
library(purrr)
library(tibble)
library(ggplot2)
library(ggthemes)
library(ambient)
library(here)
```

Exercise 1:
```{r excersise-1}
# exercise 1: random color palette generator
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]}

# define canvas
x_coords <- seq(from = 0, to = 1, length.out = 800)
y_coords <- seq(from = 0, to = 1, length.out = 800)
canvas <- long_grid(x = x_coords, y = y_coords) 

# add gen_perlin() function to our canvas to add wavy patterns
canvas <- canvas |> 
  mutate(paint = gen_perlin(x, y, frequency = 10, seed = 1234))

# create art object with the canvas object made previously
art <- ggplot(canvas, aes(x, y, fill = paint)) + 
  geom_raster(show.legend = FALSE) 
art

# plotting our art object with aesthetics 
art + 
  theme_void() +
  coord_equal()
art + 
  theme_void() +
  coord_equal() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_gradientn(colours = sample_canva())
```

Exercise 2:
```{r}
# exercise 2.2: loading in function
make_noise_art <- function(
    generator = gen_perlin, 
    frequency = 10, 
    seed = 1234,
    pixels = 2000,
    palette = c("#e5ddc8", "#01949a", "#004369", "#db1f48"), ...) {
  
  # define the grid
  canvas <- long_grid(
    x = seq(from = 0, to = 1, length.out = pixels),
    y = seq(from = 0, to = 1, length.out = pixels)) 
  
  # use the generator to add paint
  canvas <- canvas |>
    mutate(paint = generator(x, y,frequency = frequency, seed = seed, ...))
  
  # use ggplot2 to draw the picture
  art <- canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) +
    theme_void() +
    coord_equal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_gradientn(colours = palette)
  
  return(art)}

# call make_noise_art with idiosyncratic parameters
art <- make_noise_art(
  generator = gen_worley,
  seed = 666, 
  palette = sample_canva(333),
  value = "distance",
  pixels = 1000
)

art

# save the plot to a file
ggsave(
  filename = here("output", "ktnoise-art.png"), 
  plot = art,
  width = 1000,
  height = 1000,
  units = "px",
  dpi = 300)
```

```{r}
# exercise 2.3: making blank canvas
blank_canvas <- long_grid(
  x = seq(from = 0, to = 1, length.out = 2000),
  y = seq(from = 0, to = 1, length.out = 2000)) 

plot_painted_canvas <- function(canvas, palette = NULL) {
  if(is.null(palette)) {
    palette <- c("#e5ddc8","#01949a","#004369","#db1f48")
  }
  canvas |> 
    ggplot(aes(x, y, fill = paint)) + 
    geom_raster(show.legend = FALSE) +
    theme_void() +
    coord_equal() +
    scale_x_continuous(expand = c(0, 0)) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_gradientn(colours = palette)}

# creating my plot
blank_canvas |>
  mutate(paint = gen_waves(x, y, frequency = 90, seed = 7986)) |>
  plot_painted_canvas()
```




# Task 3: tiles and tessellations

Exercise 1:
```{r}

```




# Task 4: putting it all together
